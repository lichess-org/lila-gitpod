{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lichess Development on Gitpod","text":"<p>You can use Gitpod (a free, online, VS Code-like IDE) for creating a development site of Lichess.org. With a single click, it will launch a workspace and automatically:</p> <ul> <li>Clone the necessary Lichess repositories</li> <li>Install all the dependencies</li> <li>Seed your database with test data</li> <li>Start a development site</li> </ul> <p></p>"},{"location":"#what-do-you-need","title":"What do you need?","text":"<ol> <li>A Github account</li> <li>A web browser (like Chrome or Firefox)</li> </ol>"},{"location":"api-testing/","title":"API Testing","text":"<p>Consider using a lila-gitpod workspace while you develop your API integration before pointing to the production Lichess.org.</p> <ul> <li>Avoid getting rate-limited</li> <li>Don't worry about messing anything up</li> <li>If developing a bot, keep test games out of your bot's game history</li> </ul>"},{"location":"api-testing/#setup","title":"Setup","text":"<ol> <li>Create your workspace</li> <li>Make port 8080 public, so you can access it from the client.</li> </ol>"},{"location":"api-testing/#bot-development","title":"Bot Development","text":"<ol> <li>Create an account for your bot</li> <li> <p>Point your bot to use your workspace's development site instead of <code>lichess.org</code></p> <p>Using lichess-bot</p> <p>If you're using the lichess-bot project, set the <code>url</code> value in <code>config.yml</code> to your development site.</p> </li> </ol>"},{"location":"api-testing/#client-development","title":"Client Development","text":"<p>If you're using the Lichess berserk Python client, you can point it to your workspace's development site instead of <code>lichess.org</code>.</p> <pre><code>import berserk\n\nclient = berserk.Client(base_url=\"https://your-gitpod-instance.gitpod.io\")\n\nprofile = client.users.get_by_id('bobby')\nprint(profile)\n</code></pre>"},{"location":"contributing/","title":"Contributing Your Changes","text":""},{"location":"contributing/#format-your-code","title":"Format your code","text":"<p>Before submitting any pull requests, run the linters:</p> <pre><code>./lila-docker format\n</code></pre>"},{"location":"contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>If you make code changes, you can submit a Pull Request directly from your workspace.</p> <p>Using the Source Control menu, you can create a branch and commit your files. Then using the Github menu, you can submit a Pull Request.</p>"},{"location":"development/","title":"Working with Lila","text":"<p>What is lila?</p> <p>Lichess is primarily written in the Scala programming language. The name for the main Lichess codebase is \"lila\", which stands for \"Lichess in Scala\".</p>"},{"location":"development/#navigating-the-code","title":"Navigating the code","text":"<p>The main Lichess code repositories have automatically been added to your workspace. You can find them at:</p> <pre><code>ls /workspace/lila-docker/repos\n</code></pre> <p>To open them in your workspace:</p> <pre><code>open -r repos/lila      # open main lila repository\nopen -r repos/lila-ws   # open websocket repository\n</code></pre>"},{"location":"development/#recompiling-lila","title":"Recompiling lila","text":"<p>When you edit a scala file, you'll have to restart lila. In a terminal, type:</p> <pre><code>./lila-docker lila restart\n</code></pre>"},{"location":"development/#recompiling-frontend-assets","title":"Recompiling frontend assets","text":"<p>If you're working on TypeScript or SCSS files, you can automatically detect the changes and recompile the assets. In a terminal, type:</p> <pre><code>./lila-docker ui\n</code></pre>"},{"location":"development/#updating-routes","title":"Updating Routes","text":"<p>If you edit the <code>conf/routes</code> file, you'll need to update the route cache.</p> <pre><code>docker compose exec lila bash -c \"./lila playRoutes\"\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Click here to start a workspace:</p> <p></p> <p>It will take about 10-15 minutes. You can watch the progress in the terminal that automatically opens.</p>"},{"location":"getting-started/#your-development-site","title":"Your Development Site","text":"<p>To get the URL for your development site, in a new terminal, type:</p> <pre><code>gp url 8080\n</code></pre> <p>Once lila is running, your dev site will be available. You can check the status on the PORTS tab above your terminal.</p>"},{"location":"getting-started/#test-accounts","title":"Test accounts","text":"<p>Your database is preloaded with a number of test accounts:</p> <pre><code>admin    /  password   ROLE_ADMIN\nbobby    /  password\nmary     /  password\n</code></pre> <p>To see all other test accounts (admins, titled accounts, flagged accounts, bots, etc):</p> <pre><code>docker compose run --rm python python /scripts/users.py\n</code></pre>"},{"location":"getting-started/#stopping-your-workspace","title":"Stopping Your Workspace","text":"<p>Done for the day or make a mistake and want to start over? No problem.</p> <pre><code>gp stop\n</code></pre> <p>Or just leave it and it'll shut down when it's been idle for 30 minutes.</p>"},{"location":"lilaisms/","title":"Lilaisms","text":"<p>See the wiki</p> <p>For notes on how lila uses Scala, see the wiki page: Lilaisms</p>"},{"location":"other-resources/","title":"Other Resources","text":"<ul> <li>Information on Contributing to Lichess</li> <li>An explanation of the Lichess repositories, services, architecture</li> <li>Gitpod documentation</li> <li>Lichess API docs</li> <li>Lichess.org Discord server (See #lichess-dev-onboarding for help)</li> </ul> <p>If you prefer to setup your development environment locally, check out the wiki's onboarding instructions.</p>"},{"location":"sharing/","title":"Sharing","text":""},{"location":"sharing/#making-your-development-site-public","title":"Making your development site public","text":"<p>By default, your Lichess dev site is only accessible by you. If you want to make it available to others or if you're developing an API client application, you can make port <code>8080</code> public.</p> <p>Click the PORTS tab above your terminal, then change the port visibility to public for <code>8080</code>. You can keep the others private.</p> <p>Attention</p> <p>Your workspace will automatically stop after you've been idle for 30 minutes, at which point your URL will return an error.</p>"},{"location":"sharing/#collaborating","title":"Collaborating","text":"<p>It is also possible to share your workspace to work on the same code with someone else.</p> <p>See Gitpod's documentation for more on sharing a running workspace.</p>"}]}